

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Answer {
  id        String    @id @default(uuid())
  questionId String   @map("question_id")
  text      String
  points    Int       @default(0)
  sort      Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  question   Question   @relation(fields: [questionId], references: [id])
  
  @@map("answers")
}

model Question {
  id        String    @id @default(uuid())
  companyId String    @map("company_id")
  text      String
  type      Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  company   Company   @relation(fields: [companyId], references: [id])
  answers   Answer[]
  tags      QuestionTag[]
  documents Document[]

  @@map("questions")
}

model Company {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  users     User[]
  questions Question[]
  series    Series[]

  @@map("companies")
}

model Document {
  id          String @id @default(uuid())
  questionId  String @map("question_id")
  title       String
  location    String
  tempfile    String
  filename    String
  public      Boolean
  status      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  question    Question   @relation(fields: [questionId], references: [id])

  @@map("documents")
}

model Event {
  id          String @id @default(uuid())
  description String
  seriesId    String @map("series_id")
  location    String
  status      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  series      Series   @relation(fields: [seriesId], references: [id])

  @@map("events")
}


model Series {
  id          String @id @default(uuid())
  companyId   String @map("company_id")
  name        String
  description String
  promoImage  String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  company     Company   @relation(fields: [companyId], references: [id])
  events      Event[]

  @@map("series")
}  

model User {
  id        String @id @default(uuid())
  companyId String @map("company_id")
  name      String
  email     String
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")

  company   Company   @relation(fields: [companyId], references: [id])

  @@index(fields: [email])
  @@unique(email)

  @@map("users")
}

model Tag {
  id            String @id @default(uuid())
  text          String
  icon          String
  colour        String
  iconColour    String
  iconSecondary String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  questions     QuestionTag[]

  @@map("tags")
}


model QuestionTag {
  id          String @id @default(uuid())
  questionId  String @map("question_id")
  tagId       String @map("tag_id")

  questions   Question @relation(fields: [questionId], references: [id])
  tags        Tag     @relation(fields: [tagId], references: [id])

  @@unique([questionId, tagId])

  @@map("question_tags")
}